@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
  }
  
@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}

@mixin button-size($padding, $font-size, $border-radius) {
    padding: $padding;
    font-size: $font-size;
    border-radius: $border-radius;
  }
  
@mixin button-color($color, $background, $border) {
    color: $color;
    background-color: $background;
    border-color: $border;
    > a:only-child {
        color: currentColor;
        &:after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: transparent;
        }
    }
}
  
@mixin button-variant($color, $background, $border) {
    @include button-color($color, $background, $border);
  
    &:hover {
      @include button-color(tint($color, 20%), tint($background, 20%), tint($border, 20%));
    }
    &:active, &.active {
      @include button-color(shade($color, 5%), shade($background, 5%), shade($border, 5%));
    }
  
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &,
        &:hover,
        &:focus,
        &:active,
        &.active {
          @include button-color($btn-disable-color, $btn-disable-bg, $btn-disable-border);
        }
    }
  }
  
@mixin btn-color($color) {
    @include button-variant(#fff, $color, $color);
  
    &:hover, &:active, &.active {
      color: #fff;
    }
}

@mixin active-btn-color($color) {
    &:focus {
        box-shadow: 0 0 0 2px fade($color, 20%);
    }
}

// Default
@mixin btn-default {
    @include button-variant($btn-default-color, $btn-default-bg, $btn-default-border);
  
    &:hover {
        @include button-color(tint($Primary, 20%), $white, tint($Primary, 20%));
    }

    &:active, &.active {
        @include button-color(shade($Primary, 5%), $white, shade($Primary, 5%))
    }

    @include active-btn-color($Primary);
}

//   // Primary
@mixin btn-primary() {
    @include button-variant($btn-primary-color, $btn-primary-bg, $Primary);
  
    &:hover,
    &:active,
    &.active {
        color: $btn-primary-color;
    }
    @include active-btn-color($Primary);
}

// Text
@mixin btn-text() {
    @include button-variant($btn-ghost-color, transparent, transparent);

    // for disabled
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &,
        &:hover,
        &:focus,
        &:active,
        &.active {
            @include button-color($btn-disable-color, $btn-ghost-bg, transparent);
        }
    }

    &:hover {
        @include button-color(tint($Primary, 20%), $btn-ghost-bg, transparent);
    }

    &:active, &.active {
        @include button-color(shade($Primary, 5%), $btn-ghost-bg, transparent);
    }

    @include active-btn-color($Primary);
}

@mixin btn {
    display: inline-block;
    margin-bottom: 0;
    font-weight: $btn-font-weight;
    text-align: center;
    vertical-align: middle;
    touch-action: manipulation;
    cursor: pointer;
    background-image: none;
    border: 1px solid transparent;
    white-space: nowrap;
    line-height: $line-height-base;
    user-select: none;
    transition: color .2 linear, background-color .2 linear, border .2 linear, box-shadow .2 linear;
    @include button-size($btn-padding-base, $btn-font-size, $btn-border-radius);
  
    // > .#{$css-prefix-iconfont} {
    //     line-height: $line-height-base;
    //     vertical-align: middle;
    // }
  
    // &-icon-only &-circle > .#{$css-prefix-iconfont} {
    //     vertical-align: baseline;
    // }
  
    > span {
        vertical-align: middle;
    }
  
    &,
    &:active,
    &:focus {
        outline: 0;
    }
  
    &:not([disabled])::hover {
        text-decoration: none;
    }
  
    &:not([disabled])::active {
        outline: 0;
        // transition: none;  // 如果不注释此行，那么active会和focus同时触发，此时focus的开始动画transition会无效
    }
  
    &.disabled,
    &[disabled] {
        cursor: $cursor-disabled;
        > * {
            pointer-events: none;
        }
    }
  
    &-large {
        @include button-size($btn-padding-large, $btn-font-size-large, $btn-border-radius);
    }
  
    &-small {
        @include button-size($btn-padding-small, $btn-font-size, $btn-border-radius-small);
    }
  
    // &-icon-only{
    //     .button-size(@btn-padding-base-icon; @btn-font-size; @btn-border-radius);
    // }
    // &-icon-only&-small{
    //     .button-size(@btn-padding-small-icon; @btn-font-size; @btn-border-radius-small);
    // }
    // &-icon-only&-large{
    //     .button-size(@btn-padding-large-icon; @btn-font-size-large; @btn-border-radius);
    // }
  }
  
 
  


$css-prefix: 'b-';
$btn-prefix-cls: $css-prefix + 'btn';

.#{$btn-prefix-cls} {
    @include btn;
    @include btn-default;
    
    &-long{
        width: 100%;
    }

    &-text {
        @include btn-text();
    }

    &-primary {
        @include btn-primary();
    }

    &-success {
        @include btn-color($Success);
    }
    &-warning {
        @include btn-color($Warning);
    }

    &-error {
        @include btn-color($Error);
    }

    &-info {
        @include btn-color($Info);
    }

    &:before {
        position: absolute;
        top: -1px;
        left: -1px;
        bottom: -1px;
        right: -1px;
        background: #fff;
        opacity: 0.35;
        content: '';
        border-radius: inherit;
        z-index: 1;
        transition: opacity $transition-time;
        pointer-events: none;
        display: none;
    }
}